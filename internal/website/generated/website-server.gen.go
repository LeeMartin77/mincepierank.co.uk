// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Home Page
	// (GET /)
	HomePage(c *gin.Context)

	// (GET /about)
	AboutPage(c *gin.Context)

	// (GET /about/cookies)
	CookiePage(c *gin.Context)

	// (GET /about/privacy)
	PrivacyPage(c *gin.Context)

	// (GET /admin)
	GetAdminIndex(c *gin.Context)

	// (GET /admin/config)
	GetAdminConfig(c *gin.Context)

	// (POST /admin/config)
	CreateAdminConfig(c *gin.Context)

	// (DELETE /admin/config/{key})
	DeleteAdminConfig(c *gin.Context, key string)

	// (PUT /admin/config/{key})
	UpdateAdminConfig(c *gin.Context, key string)

	// (GET /admin/makerpies)
	GetMakerPiesAdmin(c *gin.Context)

	// (POST /admin/makerpies)
	CreateMakerPieAdmin(c *gin.Context)

	// (POST /admin/makerpies/bulk)
	BulkCreateMakerPieAdmin(c *gin.Context)

	// (DELETE /admin/makerpies/{oid})
	DeleteMakerPie(c *gin.Context, oid string)

	// (GET /admin/makerpies/{oid})
	GetMakerPieAdmin(c *gin.Context, oid string)

	// (PUT /admin/makerpies/{oid})
	UpdateMakerPie(c *gin.Context, oid string)

	// (GET /profile/rankings/{year})
	YearPersonalRanking(c *gin.Context, year Year, params YearPersonalRankingParams)

	// (GET /years)
	YearsPage(c *gin.Context)

	// (GET /years/{year})
	YearPage(c *gin.Context, year Year)

	// (GET /years/{year}/all-pies)
	YearAllPies(c *gin.Context, year Year, params YearAllPiesParams)

	// (GET /years/{year}/brands)
	YearAllBrands(c *gin.Context, year Year)

	// (GET /years/{year}/brands/{brand})
	YearBrandPies(c *gin.Context, year Year, brand Brand, params YearBrandPiesParams)

	// (GET /years/{year}/brands/{brand}/{pie})
	YearBrandPie(c *gin.Context, year Year, brand Brand, pie string)

	// (PUT /years/{year}/brands/{brand}/{pie}/rating)
	RateYearBrandPie(c *gin.Context, year Year, brand Brand, pie string)

	// (GET /years/{year}/categories)
	YearAllCategories(c *gin.Context, year Year)

	// (GET /years/{year}/categories/{category})
	YearCategoryPies(c *gin.Context, year Year, category string, params YearCategoryPiesParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// HomePage operation middleware
func (siw *ServerInterfaceWrapper) HomePage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HomePage(c)
}

// AboutPage operation middleware
func (siw *ServerInterfaceWrapper) AboutPage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AboutPage(c)
}

// CookiePage operation middleware
func (siw *ServerInterfaceWrapper) CookiePage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CookiePage(c)
}

// PrivacyPage operation middleware
func (siw *ServerInterfaceWrapper) PrivacyPage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PrivacyPage(c)
}

// GetAdminIndex operation middleware
func (siw *ServerInterfaceWrapper) GetAdminIndex(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAdminIndex(c)
}

// GetAdminConfig operation middleware
func (siw *ServerInterfaceWrapper) GetAdminConfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAdminConfig(c)
}

// CreateAdminConfig operation middleware
func (siw *ServerInterfaceWrapper) CreateAdminConfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAdminConfig(c)
}

// DeleteAdminConfig operation middleware
func (siw *ServerInterfaceWrapper) DeleteAdminConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAdminConfig(c, key)
}

// UpdateAdminConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateAdminConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAdminConfig(c, key)
}

// GetMakerPiesAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetMakerPiesAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMakerPiesAdmin(c)
}

// CreateMakerPieAdmin operation middleware
func (siw *ServerInterfaceWrapper) CreateMakerPieAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateMakerPieAdmin(c)
}

// BulkCreateMakerPieAdmin operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateMakerPieAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateMakerPieAdmin(c)
}

// DeleteMakerPie operation middleware
func (siw *ServerInterfaceWrapper) DeleteMakerPie(c *gin.Context) {

	var err error

	// ------------- Path parameter "oid" -------------
	var oid string

	err = runtime.BindStyledParameterWithOptions("simple", "oid", c.Param("oid"), &oid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter oid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteMakerPie(c, oid)
}

// GetMakerPieAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetMakerPieAdmin(c *gin.Context) {

	var err error

	// ------------- Path parameter "oid" -------------
	var oid string

	err = runtime.BindStyledParameterWithOptions("simple", "oid", c.Param("oid"), &oid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter oid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMakerPieAdmin(c, oid)
}

// UpdateMakerPie operation middleware
func (siw *ServerInterfaceWrapper) UpdateMakerPie(c *gin.Context) {

	var err error

	// ------------- Path parameter "oid" -------------
	var oid string

	err = runtime.BindStyledParameterWithOptions("simple", "oid", c.Param("oid"), &oid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter oid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateMakerPie(c, oid)
}

// YearPersonalRanking operation middleware
func (siw *ServerInterfaceWrapper) YearPersonalRanking(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params YearPersonalRankingParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "categories" -------------

	err = runtime.BindQueryParameter("form", true, false, "categories", c.Request.URL.Query(), &params.Categories)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter categories: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearPersonalRanking(c, year, params)
}

// YearsPage operation middleware
func (siw *ServerInterfaceWrapper) YearsPage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearsPage(c)
}

// YearPage operation middleware
func (siw *ServerInterfaceWrapper) YearPage(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearPage(c, year)
}

// YearAllPies operation middleware
func (siw *ServerInterfaceWrapper) YearAllPies(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params YearAllPiesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "categories" -------------

	err = runtime.BindQueryParameter("form", true, false, "categories", c.Request.URL.Query(), &params.Categories)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter categories: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearAllPies(c, year, params)
}

// YearAllBrands operation middleware
func (siw *ServerInterfaceWrapper) YearAllBrands(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearAllBrands(c, year)
}

// YearBrandPies operation middleware
func (siw *ServerInterfaceWrapper) YearBrandPies(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "brand" -------------
	var brand Brand

	err = runtime.BindStyledParameterWithOptions("simple", "brand", c.Param("brand"), &brand, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter brand: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params YearBrandPiesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "categories" -------------

	err = runtime.BindQueryParameter("form", true, false, "categories", c.Request.URL.Query(), &params.Categories)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter categories: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearBrandPies(c, year, brand, params)
}

// YearBrandPie operation middleware
func (siw *ServerInterfaceWrapper) YearBrandPie(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "brand" -------------
	var brand Brand

	err = runtime.BindStyledParameterWithOptions("simple", "brand", c.Param("brand"), &brand, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter brand: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pie" -------------
	var pie string

	err = runtime.BindStyledParameterWithOptions("simple", "pie", c.Param("pie"), &pie, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pie: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearBrandPie(c, year, brand, pie)
}

// RateYearBrandPie operation middleware
func (siw *ServerInterfaceWrapper) RateYearBrandPie(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "brand" -------------
	var brand Brand

	err = runtime.BindStyledParameterWithOptions("simple", "brand", c.Param("brand"), &brand, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter brand: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pie" -------------
	var pie string

	err = runtime.BindStyledParameterWithOptions("simple", "pie", c.Param("pie"), &pie, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pie: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RateYearBrandPie(c, year, brand, pie)
}

// YearAllCategories operation middleware
func (siw *ServerInterfaceWrapper) YearAllCategories(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearAllCategories(c, year)
}

// YearCategoryPies operation middleware
func (siw *ServerInterfaceWrapper) YearCategoryPies(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "category" -------------
	var category string

	err = runtime.BindStyledParameterWithOptions("simple", "category", c.Param("category"), &category, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params YearCategoryPiesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "categories" -------------

	err = runtime.BindQueryParameter("form", true, false, "categories", c.Request.URL.Query(), &params.Categories)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter categories: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearCategoryPies(c, year, category, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/", wrapper.HomePage)
	router.GET(options.BaseURL+"/about", wrapper.AboutPage)
	router.GET(options.BaseURL+"/about/cookies", wrapper.CookiePage)
	router.GET(options.BaseURL+"/about/privacy", wrapper.PrivacyPage)
	router.GET(options.BaseURL+"/admin", wrapper.GetAdminIndex)
	router.GET(options.BaseURL+"/admin/config", wrapper.GetAdminConfig)
	router.POST(options.BaseURL+"/admin/config", wrapper.CreateAdminConfig)
	router.DELETE(options.BaseURL+"/admin/config/:key", wrapper.DeleteAdminConfig)
	router.PUT(options.BaseURL+"/admin/config/:key", wrapper.UpdateAdminConfig)
	router.GET(options.BaseURL+"/admin/makerpies", wrapper.GetMakerPiesAdmin)
	router.POST(options.BaseURL+"/admin/makerpies", wrapper.CreateMakerPieAdmin)
	router.POST(options.BaseURL+"/admin/makerpies/bulk", wrapper.BulkCreateMakerPieAdmin)
	router.DELETE(options.BaseURL+"/admin/makerpies/:oid", wrapper.DeleteMakerPie)
	router.GET(options.BaseURL+"/admin/makerpies/:oid", wrapper.GetMakerPieAdmin)
	router.PUT(options.BaseURL+"/admin/makerpies/:oid", wrapper.UpdateMakerPie)
	router.GET(options.BaseURL+"/profile/rankings/:year", wrapper.YearPersonalRanking)
	router.GET(options.BaseURL+"/years", wrapper.YearsPage)
	router.GET(options.BaseURL+"/years/:year", wrapper.YearPage)
	router.GET(options.BaseURL+"/years/:year/all-pies", wrapper.YearAllPies)
	router.GET(options.BaseURL+"/years/:year/brands", wrapper.YearAllBrands)
	router.GET(options.BaseURL+"/years/:year/brands/:brand", wrapper.YearBrandPies)
	router.GET(options.BaseURL+"/years/:year/brands/:brand/:pie", wrapper.YearBrandPie)
	router.PUT(options.BaseURL+"/years/:year/brands/:brand/:pie/rating", wrapper.RateYearBrandPie)
	router.GET(options.BaseURL+"/years/:year/categories", wrapper.YearAllCategories)
	router.GET(options.BaseURL+"/years/:year/categories/:category", wrapper.YearCategoryPies)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaTW/bOBP+KyrfF9iLErpJsAffmuymW6BdGCl6KIocaGkss6ZIlh9JtIb/+4KkZMuy",
	"bCvdqHUaXxLbHA5nnnlGMyQ1R4nIpeDAjUbDOZJEkRwMKP/tUhGeug+UoyGSxExRjDjJAQ3R2I/FSME3",
	"SxWkaGiUhRjpZAo5cZNMIZ2gNoryDC0WMboiBjKhKOhrygwoJ5WCThSVhgq3xkoiMiKaeKlIuq+CozjY",
	"8c2CKlaGJMspqL46NZDrFjPi6geiFCm8We9pTs3SzYZ65gfrmlOYEMsMGp4NYjQRKicGDRHl5vcLtNRO",
	"uYEMlNc/IhlsUy/dWKv2192UfwaitoSocEO7IrRf/8JN11JwDR7Mv4W5FjaQIhHcAPfAGXgweGpy5r5s",
	"Z8AiboSbCxNNvL5FjD5xeJCQGEj/VEqoxhJESkYT4ibir9rNrq/0fwUTNET/wys64zCqcdDWsrpdLhhB",
	"KVOh451dmiGVkKAMDRgkIoUmeudnLejFKAety+BvZsMqLl+CzpX87VKZGH+FxATrKZ8Ir4oa5sY+UJ7A",
	"iMIN4TMUoztQOjj2+nRwOnDrCwmcSIqG6Nz/FHuGeC+w+5OBx9Z555F9l6Ih+kvkMAq0XIv92WDwRGGf",
	"ihwiz3w/VBK+PYpLE3CTHz5aNs+JKkqro9JsQzLtUJV2zGiCbp0kJmNhzVan37jR5+L1dv9wIsSs5Gmr",
	"n1d+vF9Hgw29uyoVvSNJsdXVURjv19fSiD6dTXPKtzr5FswbJ/COp/DQn5t+jYj6RRYxuhhc7PdwWSue",
	"CpaARA0VnAg+odlecK6C2MtAJ0ZS6LbMV0AMNPH4ZkGbS5EWO8rtw8n9/f2JK3cnVjHgrlil6xCtV8gZ",
	"FK2d1x1htkMxdNMr4fZK2GgavWeR96LZ7ix6DnrJwIPLCTyfQbEIDSUDA5t8+MP/vs6Hevv/pbWnDLHp",
	"3vTfvhD8YyRtS9J9kin5QSD3kskdM7Z7rgZAjrkacjUnM1ByV7/2FswHJzSioL0XxypGDFSQrBDZxv7c",
	"MkMlUQZ71qfEkF18T6mWjBQhD1sq2ESBntZGxkIwINwN0bR1Bs1JBteUrW8Zx5QTfwywIc/IGFj7wYVn",
	"y5ZlJElmV8KWDAij3OZjUChGDyeZOFntTs/PqhkjRRN4x0fAE+g88Y4w6pI4bcfhHsbvKZ+1WlmUhxUd",
	"1mk8YcqzjAoCD3e8Fq4qOEsI69ivzKpD1QJC3b1j7/HdzzM8tsxToD2LLy2b9ZzJ/1DZOesaXKumdom/",
	"8yR6DAnOB+ebx54fbZKA1q+iG0ipgsRERkQe0nD4We0uL56MQdeEMqvgVXSlbApRmUiRmISjMP1DSDIX",
	"NO3Qo1Yc6dQ7CZoeG9TWgrqvv6hS8IhxL5uA/ln8RE/O2oXKI+5R4v/UOz1dk/QcGqFGvdnTxXTuXNZu",
	"wh7Xxhy3ZaFCSSUmlAFWhM8ozzSeu8ZzsXV79hmIGoHSghN2E+b0t0H7pEH9pt0Ojd7R1BIWVWb+PPBk",
	"6Xx4+q0/19q0rkSwv7lcxHvlRqH52SsXrnE7CG5cQy+c8dhFWu+MtO73LsEb0ONNgtffidG9u1nraH8K",
	"aytYvo+zt000MWHsZOc5jpv4hrFReDj3iSxhzG8ani26B/ZEqELsX3jZG+DLINV/iEtzfp0UCg7huf+/",
	"+/nkQf5BqfTMcd7P/fCS12FnXcUKPJcUunGjP2poyjMG7hn7IljRsjuVJbydd6edwopdJHnWfA3xUH3a",
	"stm/IQY2eNjL3dyEMlbitfnmGRNiptuHJNFGFe1jRki5VWfzMrD+GuLmbWBlw0ppvDR5acTh7k3LI9mJ",
	"ZayIrDchjUqGPulJ7EeRg5lSnkX3REf3SrhP1EwjM4WopM4BPGg2Unj9mGhXT3RVP5fou17XzPp1eqOV",
	"U3hefi52l8ES82J0RL17/WgpCxXaj3vT/TB6qUWMNKi7CgWrGBqiqTFSDzHOKU9AUlCEz04TcWpn2M35",
	"NwAA//9pOKJCETAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
