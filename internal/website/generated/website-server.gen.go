// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240304154729-dd082985a9b6 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Home Page
	// (GET /)
	HomePage(c *gin.Context)

	// (GET /about)
	AboutPage(c *gin.Context)

	// (GET /about/cookies)
	CookiePage(c *gin.Context)

	// (GET /about/privacy)
	PrivacyPage(c *gin.Context)

	// (GET /admin)
	GetAdminIndex(c *gin.Context)

	// (GET /admin/config)
	GetAdminConfig(c *gin.Context)

	// (GET /profile/rankings/{year})
	YearPersonalRanking(c *gin.Context, year Year, params YearPersonalRankingParams)

	// (GET /years)
	YearsPage(c *gin.Context)

	// (GET /years/{year})
	YearPage(c *gin.Context, year Year)

	// (GET /years/{year}/all-pies)
	YearAllPies(c *gin.Context, year Year, params YearAllPiesParams)

	// (GET /years/{year}/brands)
	YearAllBrands(c *gin.Context, year Year)

	// (GET /years/{year}/brands/{brand})
	YearBrandPies(c *gin.Context, year Year, brand Brand, params YearBrandPiesParams)

	// (GET /years/{year}/brands/{brand}/{pie})
	YearBrandPie(c *gin.Context, year Year, brand Brand, pie string)

	// (GET /years/{year}/categories)
	YearAllCategories(c *gin.Context, year Year)

	// (GET /years/{year}/categories/{category})
	YearCategoryPies(c *gin.Context, year Year, category string, params YearCategoryPiesParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// HomePage operation middleware
func (siw *ServerInterfaceWrapper) HomePage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HomePage(c)
}

// AboutPage operation middleware
func (siw *ServerInterfaceWrapper) AboutPage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AboutPage(c)
}

// CookiePage operation middleware
func (siw *ServerInterfaceWrapper) CookiePage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CookiePage(c)
}

// PrivacyPage operation middleware
func (siw *ServerInterfaceWrapper) PrivacyPage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PrivacyPage(c)
}

// GetAdminIndex operation middleware
func (siw *ServerInterfaceWrapper) GetAdminIndex(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAdminIndex(c)
}

// GetAdminConfig operation middleware
func (siw *ServerInterfaceWrapper) GetAdminConfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAdminConfig(c)
}

// YearPersonalRanking operation middleware
func (siw *ServerInterfaceWrapper) YearPersonalRanking(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params YearPersonalRankingParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "categories" -------------

	err = runtime.BindQueryParameter("form", true, false, "categories", c.Request.URL.Query(), &params.Categories)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter categories: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearPersonalRanking(c, year, params)
}

// YearsPage operation middleware
func (siw *ServerInterfaceWrapper) YearsPage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearsPage(c)
}

// YearPage operation middleware
func (siw *ServerInterfaceWrapper) YearPage(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearPage(c, year)
}

// YearAllPies operation middleware
func (siw *ServerInterfaceWrapper) YearAllPies(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params YearAllPiesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "categories" -------------

	err = runtime.BindQueryParameter("form", true, false, "categories", c.Request.URL.Query(), &params.Categories)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter categories: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearAllPies(c, year, params)
}

// YearAllBrands operation middleware
func (siw *ServerInterfaceWrapper) YearAllBrands(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearAllBrands(c, year)
}

// YearBrandPies operation middleware
func (siw *ServerInterfaceWrapper) YearBrandPies(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "brand" -------------
	var brand Brand

	err = runtime.BindStyledParameterWithOptions("simple", "brand", c.Param("brand"), &brand, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter brand: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params YearBrandPiesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "categories" -------------

	err = runtime.BindQueryParameter("form", true, false, "categories", c.Request.URL.Query(), &params.Categories)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter categories: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearBrandPies(c, year, brand, params)
}

// YearBrandPie operation middleware
func (siw *ServerInterfaceWrapper) YearBrandPie(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "brand" -------------
	var brand Brand

	err = runtime.BindStyledParameterWithOptions("simple", "brand", c.Param("brand"), &brand, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter brand: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pie" -------------
	var pie string

	err = runtime.BindStyledParameterWithOptions("simple", "pie", c.Param("pie"), &pie, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pie: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearBrandPie(c, year, brand, pie)
}

// YearAllCategories operation middleware
func (siw *ServerInterfaceWrapper) YearAllCategories(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearAllCategories(c, year)
}

// YearCategoryPies operation middleware
func (siw *ServerInterfaceWrapper) YearCategoryPies(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "category" -------------
	var category string

	err = runtime.BindStyledParameterWithOptions("simple", "category", c.Param("category"), &category, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params YearCategoryPiesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "categories" -------------

	err = runtime.BindQueryParameter("form", true, false, "categories", c.Request.URL.Query(), &params.Categories)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter categories: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearCategoryPies(c, year, category, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/", wrapper.HomePage)
	router.GET(options.BaseURL+"/about", wrapper.AboutPage)
	router.GET(options.BaseURL+"/about/cookies", wrapper.CookiePage)
	router.GET(options.BaseURL+"/about/privacy", wrapper.PrivacyPage)
	router.GET(options.BaseURL+"/admin", wrapper.GetAdminIndex)
	router.GET(options.BaseURL+"/admin/config", wrapper.GetAdminConfig)
	router.GET(options.BaseURL+"/profile/rankings/:year", wrapper.YearPersonalRanking)
	router.GET(options.BaseURL+"/years", wrapper.YearsPage)
	router.GET(options.BaseURL+"/years/:year", wrapper.YearPage)
	router.GET(options.BaseURL+"/years/:year/all-pies", wrapper.YearAllPies)
	router.GET(options.BaseURL+"/years/:year/brands", wrapper.YearAllBrands)
	router.GET(options.BaseURL+"/years/:year/brands/:brand", wrapper.YearBrandPies)
	router.GET(options.BaseURL+"/years/:year/brands/:brand/:pie", wrapper.YearBrandPie)
	router.GET(options.BaseURL+"/years/:year/categories", wrapper.YearAllCategories)
	router.GET(options.BaseURL+"/years/:year/categories/:category", wrapper.YearCategoryPies)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYUW/bNhD+K8JtwF640E2DPegtDdatwDYYBfowFHlgqLPNhiJZkgoiGPrvA0lJdh3J",
	"8oZoTdq8JJbveHffdx/PFLfAdWm0QuUd5FswzLISPdr49MYyVYQPQkEOhvkNEFCsRMjhJtoIWPxcCYsF",
	"5N5WSMDxDZYsLPK1CY7OW6HW0DQErpjHtbYC3VshPdrgVaDjVhgvdMix88i8zlbRKzPhUSsgqY7PFdp6",
	"Vwjvl8B+duGxdANlkO4LZi2rY1l/iFL4HuZBeBmN+5ELXLFKesjPFwRW2pbMQw5C+V8uoI8ulMc12hh/",
	"ydY4Ft4E22D0V6cF/xuZHWlRHUzHOjQdvwnLndHKYSTzL+3f6iqJgmvlUUXiPN57uvGlDA/jCmjIQbuV",
	"9tkqxmsIfFB4b5B7LH61VtuDFMwYKTgLC+knF1bvZ/rR4gpy+IHu5EyT1dEUbSB71SfMsPXp2Ilg+zKM",
	"1QatF4kDrgs8ZO/1+QB7BEp0rm3+w92w68vHFHPnf90H0zefkPtUvVArHUMJL4PtT6E4LgW+Z+oWCNyh",
	"dQnYq7PF2SLk1wYVMwJyeB2/IlEhEQUNf9YYuQ3oIrPvCsjhd13iMsnyi96fLxaP1PaNLjGLyo+mVvDD",
	"XexLoIf6iN2qypLZuq06a8v2bO0Cq6a6kYLDdfCk7EZXfhT0ZbA+F9Tj+CjX+rbV6SDOq2ifF2iqYXao",
	"xoo7xutRqMtknxdrW8ScYItSqFGQv6G/DA7vVIH388GMOTIRkzQELhYX0wj734rHoiUxsccK5VqtxHqS",
	"nKvk9v2wY6xeCYnUMnUr1NrRbTgLNKNEhUPEEq3Tisn3ac18bH1waH9ygS5xJ4qKyawr8+uRZ1rwcN2Q",
	"Lw7BH4ej7lxoPIA1ZNJvmSbEpF86jZ7g+OA03YTiaei0O9ppN+9IjAXMOBBj/JMUPTvMHuVXUm1Hy3/T",
	"7PUhm5RJ+bM5dnwICy+lXKa3rTmZZVLGF79ny+4Tmwhdi+N7+2SD3ySv+VvclvPtbKEEiG7j/+PzKZL8",
	"P22lZ87ztPbTXdXT3nWdKujWCDxNGy/SeExpDFySmZbjU28xH/Z27wJyYqpe7V9Vzt3WvbK+nem6A0W3",
	"7ef6+EZqOa+XL6yfvqEG9knH9r+78n8a07gh4NDedSxUVkIOG++NyyktheJoBIaX0DOuz6pbGtb8EwAA",
	"//998TLSGhkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
