// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240304154729-dd082985a9b6 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Home Page
	// (GET /)
	HomePage(c *gin.Context)

	// (GET /about)
	AboutPage(c *gin.Context)

	// (GET /about/cookies)
	CookiePage(c *gin.Context)

	// (GET /about/privacy)
	PrivacyPage(c *gin.Context)

	// (GET /years)
	YearsPage(c *gin.Context)

	// (GET /years/{year})
	YearPage(c *gin.Context, year Year)

	// (GET /years/{year}/all-pies)
	YearAllPies(c *gin.Context, year Year, params YearAllPiesParams)

	// (GET /years/{year}/brands)
	YearAllBrands(c *gin.Context, year Year, params YearAllBrandsParams)

	// (GET /years/{year}/brands/{brand})
	YearBrandPies(c *gin.Context, year Year, brand Brand, params YearBrandPiesParams)

	// (GET /years/{year}/brands/{brand}/{pie})
	YearBrandPie(c *gin.Context, year Year, brand Brand, pie string)

	// (GET /years/{year}/categories)
	YearAllCategories(c *gin.Context, year Year, params YearAllCategoriesParams)

	// (GET /years/{year}/categories/{category})
	YearCategoryPies(c *gin.Context, year Year, category string, params YearCategoryPiesParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// HomePage operation middleware
func (siw *ServerInterfaceWrapper) HomePage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HomePage(c)
}

// AboutPage operation middleware
func (siw *ServerInterfaceWrapper) AboutPage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AboutPage(c)
}

// CookiePage operation middleware
func (siw *ServerInterfaceWrapper) CookiePage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CookiePage(c)
}

// PrivacyPage operation middleware
func (siw *ServerInterfaceWrapper) PrivacyPage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PrivacyPage(c)
}

// YearsPage operation middleware
func (siw *ServerInterfaceWrapper) YearsPage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearsPage(c)
}

// YearPage operation middleware
func (siw *ServerInterfaceWrapper) YearPage(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearPage(c, year)
}

// YearAllPies operation middleware
func (siw *ServerInterfaceWrapper) YearAllPies(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params YearAllPiesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearAllPies(c, year, params)
}

// YearAllBrands operation middleware
func (siw *ServerInterfaceWrapper) YearAllBrands(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params YearAllBrandsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearAllBrands(c, year, params)
}

// YearBrandPies operation middleware
func (siw *ServerInterfaceWrapper) YearBrandPies(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "brand" -------------
	var brand Brand

	err = runtime.BindStyledParameterWithOptions("simple", "brand", c.Param("brand"), &brand, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter brand: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params YearBrandPiesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearBrandPies(c, year, brand, params)
}

// YearBrandPie operation middleware
func (siw *ServerInterfaceWrapper) YearBrandPie(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "brand" -------------
	var brand Brand

	err = runtime.BindStyledParameterWithOptions("simple", "brand", c.Param("brand"), &brand, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter brand: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pie" -------------
	var pie string

	err = runtime.BindStyledParameterWithOptions("simple", "pie", c.Param("pie"), &pie, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pie: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearBrandPie(c, year, brand, pie)
}

// YearAllCategories operation middleware
func (siw *ServerInterfaceWrapper) YearAllCategories(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params YearAllCategoriesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearAllCategories(c, year, params)
}

// YearCategoryPies operation middleware
func (siw *ServerInterfaceWrapper) YearCategoryPies(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "category" -------------
	var category string

	err = runtime.BindStyledParameterWithOptions("simple", "category", c.Param("category"), &category, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params YearCategoryPiesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.YearCategoryPies(c, year, category, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/", wrapper.HomePage)
	router.GET(options.BaseURL+"/about", wrapper.AboutPage)
	router.GET(options.BaseURL+"/about/cookies", wrapper.CookiePage)
	router.GET(options.BaseURL+"/about/privacy", wrapper.PrivacyPage)
	router.GET(options.BaseURL+"/years", wrapper.YearsPage)
	router.GET(options.BaseURL+"/years/:year", wrapper.YearPage)
	router.GET(options.BaseURL+"/years/:year/all-pies", wrapper.YearAllPies)
	router.GET(options.BaseURL+"/years/:year/brands", wrapper.YearAllBrands)
	router.GET(options.BaseURL+"/years/:year/brands/:brand", wrapper.YearBrandPies)
	router.GET(options.BaseURL+"/years/:year/brands/:brand/:pie", wrapper.YearBrandPie)
	router.GET(options.BaseURL+"/years/:year/categories", wrapper.YearAllCategories)
	router.GET(options.BaseURL+"/years/:year/categories/:category", wrapper.YearCategoryPies)
}

type NotFoundTexthtmlResponse struct {
	Body io.Reader

	ContentLength int64
}

type UnexpectedErrorJSONResponse Error

type HomePageRequestObject struct {
}

type HomePageResponseObject interface {
	VisitHomePageResponse(w http.ResponseWriter) error
}

type HomePage200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response HomePage200TexthtmlResponse) VisitHomePageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type HomePagedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response HomePagedefaultJSONResponse) VisitHomePageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AboutPageRequestObject struct {
}

type AboutPageResponseObject interface {
	VisitAboutPageResponse(w http.ResponseWriter) error
}

type AboutPage200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response AboutPage200TexthtmlResponse) VisitAboutPageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type AboutPagedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response AboutPagedefaultJSONResponse) VisitAboutPageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CookiePageRequestObject struct {
}

type CookiePageResponseObject interface {
	VisitCookiePageResponse(w http.ResponseWriter) error
}

type CookiePage200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response CookiePage200TexthtmlResponse) VisitCookiePageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CookiePagedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CookiePagedefaultJSONResponse) VisitCookiePageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PrivacyPageRequestObject struct {
}

type PrivacyPageResponseObject interface {
	VisitPrivacyPageResponse(w http.ResponseWriter) error
}

type PrivacyPage200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response PrivacyPage200TexthtmlResponse) VisitPrivacyPageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PrivacyPagedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PrivacyPagedefaultJSONResponse) VisitPrivacyPageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type YearsPageRequestObject struct {
}

type YearsPageResponseObject interface {
	VisitYearsPageResponse(w http.ResponseWriter) error
}

type YearsPage200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response YearsPage200TexthtmlResponse) VisitYearsPageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type YearsPagedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response YearsPagedefaultJSONResponse) VisitYearsPageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type YearPageRequestObject struct {
	Year Year `json:"year"`
}

type YearPageResponseObject interface {
	VisitYearPageResponse(w http.ResponseWriter) error
}

type YearPage200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response YearPage200TexthtmlResponse) VisitYearPageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type YearPage404TexthtmlResponse struct{ NotFoundTexthtmlResponse }

func (response YearPage404TexthtmlResponse) VisitYearPageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type YearPagedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response YearPagedefaultJSONResponse) VisitYearPageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type YearAllPiesRequestObject struct {
	Year   Year `json:"year"`
	Params YearAllPiesParams
}

type YearAllPiesResponseObject interface {
	VisitYearAllPiesResponse(w http.ResponseWriter) error
}

type YearAllPies200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response YearAllPies200TexthtmlResponse) VisitYearAllPiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type YearAllPies404TexthtmlResponse struct{ NotFoundTexthtmlResponse }

func (response YearAllPies404TexthtmlResponse) VisitYearAllPiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type YearAllPiesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response YearAllPiesdefaultJSONResponse) VisitYearAllPiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type YearAllBrandsRequestObject struct {
	Year   Year `json:"year"`
	Params YearAllBrandsParams
}

type YearAllBrandsResponseObject interface {
	VisitYearAllBrandsResponse(w http.ResponseWriter) error
}

type YearAllBrands200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response YearAllBrands200TexthtmlResponse) VisitYearAllBrandsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type YearAllBrands404TexthtmlResponse struct{ NotFoundTexthtmlResponse }

func (response YearAllBrands404TexthtmlResponse) VisitYearAllBrandsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type YearAllBrandsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response YearAllBrandsdefaultJSONResponse) VisitYearAllBrandsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type YearBrandPiesRequestObject struct {
	Year   Year  `json:"year"`
	Brand  Brand `json:"brand"`
	Params YearBrandPiesParams
}

type YearBrandPiesResponseObject interface {
	VisitYearBrandPiesResponse(w http.ResponseWriter) error
}

type YearBrandPies200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response YearBrandPies200TexthtmlResponse) VisitYearBrandPiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type YearBrandPies404TexthtmlResponse struct{ NotFoundTexthtmlResponse }

func (response YearBrandPies404TexthtmlResponse) VisitYearBrandPiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type YearBrandPiesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response YearBrandPiesdefaultJSONResponse) VisitYearBrandPiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type YearBrandPieRequestObject struct {
	Year  Year   `json:"year"`
	Brand Brand  `json:"brand"`
	Pie   string `json:"pie"`
}

type YearBrandPieResponseObject interface {
	VisitYearBrandPieResponse(w http.ResponseWriter) error
}

type YearBrandPie200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response YearBrandPie200TexthtmlResponse) VisitYearBrandPieResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type YearBrandPie404TexthtmlResponse struct{ NotFoundTexthtmlResponse }

func (response YearBrandPie404TexthtmlResponse) VisitYearBrandPieResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type YearBrandPiedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response YearBrandPiedefaultJSONResponse) VisitYearBrandPieResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type YearAllCategoriesRequestObject struct {
	Year   Year `json:"year"`
	Params YearAllCategoriesParams
}

type YearAllCategoriesResponseObject interface {
	VisitYearAllCategoriesResponse(w http.ResponseWriter) error
}

type YearAllCategories200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response YearAllCategories200TexthtmlResponse) VisitYearAllCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type YearAllCategories404TexthtmlResponse struct{ NotFoundTexthtmlResponse }

func (response YearAllCategories404TexthtmlResponse) VisitYearAllCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type YearAllCategoriesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response YearAllCategoriesdefaultJSONResponse) VisitYearAllCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type YearCategoryPiesRequestObject struct {
	Year     Year   `json:"year"`
	Category string `json:"category"`
	Params   YearCategoryPiesParams
}

type YearCategoryPiesResponseObject interface {
	VisitYearCategoryPiesResponse(w http.ResponseWriter) error
}

type YearCategoryPies200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response YearCategoryPies200TexthtmlResponse) VisitYearCategoryPiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type YearCategoryPies404TexthtmlResponse struct{ NotFoundTexthtmlResponse }

func (response YearCategoryPies404TexthtmlResponse) VisitYearCategoryPiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type YearCategoryPiesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response YearCategoryPiesdefaultJSONResponse) VisitYearCategoryPiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Home Page
	// (GET /)
	HomePage(ctx context.Context, request HomePageRequestObject) (HomePageResponseObject, error)

	// (GET /about)
	AboutPage(ctx context.Context, request AboutPageRequestObject) (AboutPageResponseObject, error)

	// (GET /about/cookies)
	CookiePage(ctx context.Context, request CookiePageRequestObject) (CookiePageResponseObject, error)

	// (GET /about/privacy)
	PrivacyPage(ctx context.Context, request PrivacyPageRequestObject) (PrivacyPageResponseObject, error)

	// (GET /years)
	YearsPage(ctx context.Context, request YearsPageRequestObject) (YearsPageResponseObject, error)

	// (GET /years/{year})
	YearPage(ctx context.Context, request YearPageRequestObject) (YearPageResponseObject, error)

	// (GET /years/{year}/all-pies)
	YearAllPies(ctx context.Context, request YearAllPiesRequestObject) (YearAllPiesResponseObject, error)

	// (GET /years/{year}/brands)
	YearAllBrands(ctx context.Context, request YearAllBrandsRequestObject) (YearAllBrandsResponseObject, error)

	// (GET /years/{year}/brands/{brand})
	YearBrandPies(ctx context.Context, request YearBrandPiesRequestObject) (YearBrandPiesResponseObject, error)

	// (GET /years/{year}/brands/{brand}/{pie})
	YearBrandPie(ctx context.Context, request YearBrandPieRequestObject) (YearBrandPieResponseObject, error)

	// (GET /years/{year}/categories)
	YearAllCategories(ctx context.Context, request YearAllCategoriesRequestObject) (YearAllCategoriesResponseObject, error)

	// (GET /years/{year}/categories/{category})
	YearCategoryPies(ctx context.Context, request YearCategoryPiesRequestObject) (YearCategoryPiesResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// HomePage operation middleware
func (sh *strictHandler) HomePage(ctx *gin.Context) {
	var request HomePageRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HomePage(ctx, request.(HomePageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HomePage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HomePageResponseObject); ok {
		if err := validResponse.VisitHomePageResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AboutPage operation middleware
func (sh *strictHandler) AboutPage(ctx *gin.Context) {
	var request AboutPageRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AboutPage(ctx, request.(AboutPageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AboutPage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AboutPageResponseObject); ok {
		if err := validResponse.VisitAboutPageResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CookiePage operation middleware
func (sh *strictHandler) CookiePage(ctx *gin.Context) {
	var request CookiePageRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CookiePage(ctx, request.(CookiePageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CookiePage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CookiePageResponseObject); ok {
		if err := validResponse.VisitCookiePageResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PrivacyPage operation middleware
func (sh *strictHandler) PrivacyPage(ctx *gin.Context) {
	var request PrivacyPageRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PrivacyPage(ctx, request.(PrivacyPageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PrivacyPage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PrivacyPageResponseObject); ok {
		if err := validResponse.VisitPrivacyPageResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// YearsPage operation middleware
func (sh *strictHandler) YearsPage(ctx *gin.Context) {
	var request YearsPageRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.YearsPage(ctx, request.(YearsPageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "YearsPage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(YearsPageResponseObject); ok {
		if err := validResponse.VisitYearsPageResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// YearPage operation middleware
func (sh *strictHandler) YearPage(ctx *gin.Context, year Year) {
	var request YearPageRequestObject

	request.Year = year

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.YearPage(ctx, request.(YearPageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "YearPage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(YearPageResponseObject); ok {
		if err := validResponse.VisitYearPageResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// YearAllPies operation middleware
func (sh *strictHandler) YearAllPies(ctx *gin.Context, year Year, params YearAllPiesParams) {
	var request YearAllPiesRequestObject

	request.Year = year
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.YearAllPies(ctx, request.(YearAllPiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "YearAllPies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(YearAllPiesResponseObject); ok {
		if err := validResponse.VisitYearAllPiesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// YearAllBrands operation middleware
func (sh *strictHandler) YearAllBrands(ctx *gin.Context, year Year, params YearAllBrandsParams) {
	var request YearAllBrandsRequestObject

	request.Year = year
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.YearAllBrands(ctx, request.(YearAllBrandsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "YearAllBrands")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(YearAllBrandsResponseObject); ok {
		if err := validResponse.VisitYearAllBrandsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// YearBrandPies operation middleware
func (sh *strictHandler) YearBrandPies(ctx *gin.Context, year Year, brand Brand, params YearBrandPiesParams) {
	var request YearBrandPiesRequestObject

	request.Year = year
	request.Brand = brand
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.YearBrandPies(ctx, request.(YearBrandPiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "YearBrandPies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(YearBrandPiesResponseObject); ok {
		if err := validResponse.VisitYearBrandPiesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// YearBrandPie operation middleware
func (sh *strictHandler) YearBrandPie(ctx *gin.Context, year Year, brand Brand, pie string) {
	var request YearBrandPieRequestObject

	request.Year = year
	request.Brand = brand
	request.Pie = pie

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.YearBrandPie(ctx, request.(YearBrandPieRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "YearBrandPie")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(YearBrandPieResponseObject); ok {
		if err := validResponse.VisitYearBrandPieResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// YearAllCategories operation middleware
func (sh *strictHandler) YearAllCategories(ctx *gin.Context, year Year, params YearAllCategoriesParams) {
	var request YearAllCategoriesRequestObject

	request.Year = year
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.YearAllCategories(ctx, request.(YearAllCategoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "YearAllCategories")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(YearAllCategoriesResponseObject); ok {
		if err := validResponse.VisitYearAllCategoriesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// YearCategoryPies operation middleware
func (sh *strictHandler) YearCategoryPies(ctx *gin.Context, year Year, category string, params YearCategoryPiesParams) {
	var request YearCategoryPiesRequestObject

	request.Year = year
	request.Category = category
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.YearCategoryPies(ctx, request.(YearCategoryPiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "YearCategoryPies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(YearCategoryPiesResponseObject); ok {
		if err := validResponse.VisitYearCategoryPiesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYUW/aPBT9K+h+32OGWVvtIW9ttWmTtglN2sNU9cGYC7gktmvfVEUo/32yHZKWJkAl",
	"UqkTL4X0Xh/fc861Y7MGoXOjFSpykK7BcMtzJLTh6cpyNfVfpIIUDKcFJKB4jpDCJMQSsHhfSItTSMkW",
	"mIATC8y5H0Qr4xMdWanmUJYJfJe5pBrvvkC7agCzEHwKMNM25wQpSEWfLiDZIEpFOEcbIMd8jl2Ixsde",
	"C/gHue2gvPKhXYz345d+uDNaOQwK/9T0RRdRZKEVoQr6ED4SW1Ce+YduRcsEpuiElYak9vUqTYNZwCsT",
	"+K3w0aAgnH62VtutKbgxmRTcD2R3zo9+OtP/FmeQwn+saQ8Wo45FtJbZi3rCAVY5G3UC2boMY7VBSzJq",
	"IPQUt9U7P2tRL4EcnasMf9ldjS83EbPJv63B9OQOBcXqpZrpACUp87EfUgkcS/zF1RISeEDrIrGPw9Fw",
	"5OfXBhU3ElI4D/9KQocEFsz/mWPQ1rMLyn6bQgpfdY7j2IrPvD8bjY5k+0LnOAjdHkIzXmTU5WJdAtvu",
	"j+BWkefcrqqqB1XZxOfOq2qKSSYF3PpMxie6oE7Slz76Xlh382NC62XVp608r0O8X6Kxht6pGisfuFh1",
	"Uh3HeL9cqyJ6JOt38W4//fbv+qUYCuibIFv7j3Inz/5p1iwvRhf7GdYvw6PLkjw72Ny0YzYpLBwCyttt",
	"NRnPsg9m13bgB15m2djn9Kssz7JBKOW9qpvszRvH5tmbF4+VLXaFM+pes65iVv92VeWcDNtjGFuHz92b",
	"V3DtjdbZP29cvOi9vcNsbSQe5vPJ5mPa3HK7NZXGh17nX3orOOFc2wPej9dNZv+2PinrtPV2LsxGJbau",
	"vq92r8zKxNX4ZOPhNrYsvI3ar/sx7fgd4a//aB82jAqb+Us2kXEpY7lUAo1Ey9VyKPSwWDI/5m8AAAD/",
	"/00frx5AFAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
