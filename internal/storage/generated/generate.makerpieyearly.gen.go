// Code generated by generator, DO NOT EDIT.
package generated

import (
	"context"
	pgx "github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	types "github.com/leemartin77/mincepierank.co.uk/internal/storage/types"
)

// Insert new 'MakerPieYearly' into table 'maker_pie_yearly' - duplicate ids is a no-op
func MakerPieYearlyCreate(ctx context.Context, pg *pgxpool.Pool, c types.MakerPieYearly) (*types.MakerPieYearly, error) {
	args := []interface{}{
		c.Year,
		c.MakerId,
		c.Id,
		c.DisplayName,
		c.Fresh,
		c.ImageFile,
		c.WebLink,
		c.PackCount,
		c.PackPriceInPence,
		c.OId,
	}
	sql := "INSERT INTO maker_pie_yearly (year,makerid,id,displayname,fresh,image_file,web_link,pack_count,pack_price_in_pence,oid) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) ON CONFLICT DO NOTHING"
	_, err := pg.Exec(ctx, sql, args...)
	if err != nil {
		return nil, err
	}
	return &c, nil
}

// Update 'MakerPieYearly' in table 'maker_pie_yearly' based on id columns
func MakerPieYearlyUpdate(ctx context.Context, pg *pgxpool.Pool, u types.MakerPieYearly) (*types.MakerPieYearly, error) {
	parameters := []interface{}{}
	parameters = append(parameters, u.Year)
	parameters = append(parameters, u.MakerId)
	parameters = append(parameters, u.Id)
	parameters = append(parameters, u.DisplayName)
	parameters = append(parameters, u.Fresh)
	parameters = append(parameters, u.ImageFile)
	parameters = append(parameters, u.WebLink)
	parameters = append(parameters, u.PackCount)
	parameters = append(parameters, u.PackPriceInPence)
	parameters = append(parameters, u.OId)
	sql := "UPDATE maker_pie_yearly SET displayname=$4,fresh=$5,image_file=$6,web_link=$7,pack_count=$8,pack_price_in_pence=$9,oid=$10 WHERE year=$1 AND makerid=$2 AND id=$3"
	_, err := pg.Exec(ctx, sql, parameters...)
	if err != nil {
		return nil, err
	}
	return &u, nil
}

// Read 'MakerPieYearly' in table 'maker_pie_yearly' based on id columns - nil but no error if not found
func MakerPieYearlyRead(ctx context.Context, pg *pgxpool.Pool, Year int32, MakerId string, Id string) (*types.MakerPieYearly, error) {
	r := types.MakerPieYearly{}
	identifiers := []interface{}{}
	identifiers = append(identifiers, Year)
	identifiers = append(identifiers, MakerId)
	identifiers = append(identifiers, Id)
	sql := "SELECT year, makerid, id, displayname, fresh, image_file, web_link, pack_count, pack_price_in_pence, oid FROM maker_pie_yearly  WHERE year = $1 AND makerid = $2 AND id = $3"
	res := pg.QueryRow(ctx, sql, identifiers...)
	err := res.Scan(&r.Year, &r.MakerId, &r.Id, &r.DisplayName, &r.Fresh, &r.ImageFile, &r.WebLink, &r.PackCount, &r.PackPriceInPence, &r.OId)
	if err == pgx.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, err
	}
	return &r, nil
}

// Deletes 'MakerPieYearly' in table 'maker_pie_yearly' based on id columns - no error if not found
func MakerPieYearlyDelete(ctx context.Context, pg *pgxpool.Pool, Year int32, MakerId string, Id string) error {
	identifiers := []interface{}{}
	identifiers = append(identifiers, Year)
	identifiers = append(identifiers, MakerId)
	identifiers = append(identifiers, Id)
	sql := "DELETE FROM maker_pie_yearly WHERE year = $1 AND makerid = $2 AND id = $3"
	_, err := pg.Exec(ctx, sql, identifiers...)
	if err != nil {
		return err
	}
	return nil
}
