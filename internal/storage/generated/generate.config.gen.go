// Code generated by generator, DO NOT EDIT.
package generated

import (
	"context"
	pgx "github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	types "github.com/leemartin77/mincepierank.co.uk/internal/storage/types"
)

// Insert new 'Config' into table 'config' - duplicate ids is a no-op
func ConfigCreate(ctx context.Context, pg *pgxpool.Pool, c types.Config) (*types.Config, error) {
	args := []interface{}{
		c.Key,
		c.Value,
	}
	sql := "INSERT INTO config (key,value) VALUES ($1,$2) ON CONFLICT DO NOTHING"
	_, err := pg.Exec(ctx, sql, args...)
	if err != nil {
		return nil, err
	}
	return &c, nil
}

// Update 'Config' in table 'config' based on id columns
func ConfigUpdate(ctx context.Context, pg *pgxpool.Pool, u types.Config) (*types.Config, error) {
	parameters := []interface{}{}
	parameters = append(parameters, u.Key)
	parameters = append(parameters, u.Value)
	sql := "UPDATE config SET value=$2 WHERE key=$1"
	_, err := pg.Exec(ctx, sql, parameters...)
	if err != nil {
		return nil, err
	}
	return &u, nil
}

// Read 'Config' in table 'config' based on id columns - nil but no error if not found
func ConfigRead(ctx context.Context, pg *pgxpool.Pool, Key string) (*types.Config, error) {
	r := types.Config{}
	identifiers := []interface{}{}
	identifiers = append(identifiers, Key)
	sql := "SELECT key, value FROM config  WHERE key = $1"
	res := pg.QueryRow(ctx, sql, identifiers...)
	err := res.Scan(&r.Key, &r.Value)
	if err == pgx.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, err
	}
	return &r, nil
}

// Deletes 'Config' in table 'config' based on id columns - no error if not found
func ConfigDelete(ctx context.Context, pg *pgxpool.Pool, Key string) error {
	identifiers := []interface{}{}
	identifiers = append(identifiers, Key)
	sql := "DELETE FROM config WHERE key = $1"
	_, err := pg.Exec(ctx, sql, identifiers...)
	if err != nil {
		return err
	}
	return nil
}
