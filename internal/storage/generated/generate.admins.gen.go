// Code generated by generator, DO NOT EDIT.
package generated

import (
	"context"
	pgx "github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	types "github.com/leemartin77/mincepierank.co.uk/internal/storage/types"
)

// Insert new 'Admins' into table 'admins' - duplicate ids is a no-op
func AdminsCreate(ctx context.Context, pg *pgxpool.Pool, c types.Admins) (*types.Admins, error) {
	args := []interface{}{
		c.Id,
	}
	sql := "INSERT INTO admins (id) VALUES ($1) ON CONFLICT DO NOTHING"
	_, err := pg.Exec(ctx, sql, args...)
	if err != nil {
		return nil, err
	}
	return &c, nil
}

// Update 'Admins' in table 'admins' based on id columns
func AdminsUpdate(ctx context.Context, pg *pgxpool.Pool, u types.Admins) (*types.Admins, error) {
	parameters := []interface{}{}
	parameters = append(parameters, u.Id)
	sql := "UPDATE admins SET  WHERE id=$1"
	_, err := pg.Exec(ctx, sql, parameters...)
	if err != nil {
		return nil, err
	}
	return &u, nil
}

// Read 'Admins' in table 'admins' based on id columns - nil but no error if not found
func AdminsRead(ctx context.Context, pg *pgxpool.Pool, Id string) (*types.Admins, error) {
	r := types.Admins{}
	identifiers := []interface{}{}
	identifiers = append(identifiers, Id)
	sql := "SELECT id FROM admins  WHERE id = $1"
	res := pg.QueryRow(ctx, sql, identifiers...)
	err := res.Scan(&r.Id)
	if err == pgx.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, err
	}
	return &r, nil
}

// Deletes 'Admins' in table 'admins' based on id columns - no error if not found
func AdminsDelete(ctx context.Context, pg *pgxpool.Pool, Id string) error {
	identifiers := []interface{}{}
	identifiers = append(identifiers, Id)
	sql := "DELETE FROM admins WHERE id = $1"
	_, err := pg.Exec(ctx, sql, identifiers...)
	if err != nil {
		return err
	}
	return nil
}
