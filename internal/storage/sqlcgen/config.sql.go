// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: config.sql

package sqlcgen

import (
	"context"
)

const getActiveYear = `-- name: GetActiveYear :one
SELECT CAST(coalesce(value, '2023') AS bigint) FROM config WHERE key = 'activeYear'
`

func (q *Queries) GetActiveYear(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getActiveYear)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getConfig = `-- name: GetConfig :one
SELECT key, value FROM config WHERE key = $1::text
`

func (q *Queries) GetConfig(ctx context.Context, key string) (Config, error) {
	row := q.db.QueryRow(ctx, getConfig, key)
	var i Config
	err := row.Scan(&i.Key, &i.Value)
	return i, err
}

const isAdminId = `-- name: IsAdminId :one
SELECT CASE 
    WHEN EXISTS (
        SELECT 1 
        FROM admins
        WHERE id = $1::text
    ) 
    THEN true 
    ELSE false 
END
`

func (q *Queries) IsAdminId(ctx context.Context, userID string) (bool, error) {
	row := q.db.QueryRow(ctx, isAdminId, userID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}
