// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: maker_pies.sql

package sqlcgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllMakerPies = `-- name: GetAllMakerPies :many
SELECT mpy.oid::text as oidstr , mpy.year, mpy.makerid, mpy.id, mpy.displayname, mpy.fresh, mpy.labels, mpy.image_file, mpy.web_link, mpy.pack_count, mpy.pack_price_in_pence, mpy.validated, mpy.oid FROM maker_pie_yearly mpy
`

type GetAllMakerPiesRow struct {
	Oidstr           string
	Year             int32
	Makerid          string
	ID               string
	Displayname      pgtype.Text
	Fresh            pgtype.Bool
	Labels           []string
	ImageFile        pgtype.Text
	WebLink          pgtype.Text
	PackCount        pgtype.Int4
	PackPriceInPence pgtype.Int4
	Validated        pgtype.Bool
	Oid              pgtype.UUID
}

func (q *Queries) GetAllMakerPies(ctx context.Context) ([]GetAllMakerPiesRow, error) {
	rows, err := q.db.Query(ctx, getAllMakerPies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllMakerPiesRow
	for rows.Next() {
		var i GetAllMakerPiesRow
		if err := rows.Scan(
			&i.Oidstr,
			&i.Year,
			&i.Makerid,
			&i.ID,
			&i.Displayname,
			&i.Fresh,
			&i.Labels,
			&i.ImageFile,
			&i.WebLink,
			&i.PackCount,
			&i.PackPriceInPence,
			&i.Validated,
			&i.Oid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMakerPieByOid = `-- name: GetMakerPieByOid :one
SELECT year, makerid, id, displayname, fresh, labels, image_file, web_link, pack_count, pack_price_in_pence, validated, oid FROM maker_pie_yearly where oid = uuid($1::text)
`

func (q *Queries) GetMakerPieByOid(ctx context.Context, oid string) (MakerPieYearly, error) {
	row := q.db.QueryRow(ctx, getMakerPieByOid, oid)
	var i MakerPieYearly
	err := row.Scan(
		&i.Year,
		&i.Makerid,
		&i.ID,
		&i.Displayname,
		&i.Fresh,
		&i.Labels,
		&i.ImageFile,
		&i.WebLink,
		&i.PackCount,
		&i.PackPriceInPence,
		&i.Validated,
		&i.Oid,
	)
	return i, err
}
