// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: maker_pie_ranking.sql

package sqlcgen

import (
	"context"
)

const getUserMakerPieRanking = `-- name: GetUserMakerPieRanking :one
SELECT mpry.year, mpry.makerid, mpry.pieid, mpry.userid, mpry.pastry, mpry.filling, mpry.topping, mpry.looks, mpry.value, mpry.notes, mpry.last_updated 
FROM maker_pie_ranking_yearly mpry
WHERE
    userid = $1::text
    AND year = $2::int
    AND makerid = $3::text
    AND pieid = $4::text
`

type GetUserMakerPieRankingParams struct {
	Userid  string
	Year    int32
	Makerid string
	Pieid   string
}

func (q *Queries) GetUserMakerPieRanking(ctx context.Context, arg GetUserMakerPieRankingParams) (MakerPieRankingYearly, error) {
	row := q.db.QueryRow(ctx, getUserMakerPieRanking,
		arg.Userid,
		arg.Year,
		arg.Makerid,
		arg.Pieid,
	)
	var i MakerPieRankingYearly
	err := row.Scan(
		&i.Year,
		&i.Makerid,
		&i.Pieid,
		&i.Userid,
		&i.Pastry,
		&i.Filling,
		&i.Topping,
		&i.Looks,
		&i.Value,
		&i.Notes,
		&i.LastUpdated,
	)
	return i, err
}

const upsertUserMakerPieRanking = `-- name: UpsertUserMakerPieRanking :exec
INSERT INTO maker_pie_ranking_yearly (year, makerid, pieid, userid, pastry, filling, topping, looks, value, last_updated)
VALUES (
        $1::int,
        $2::text,
        $3::text,
        $4::text,
        $5::int,
        $6::int,
        $7::int,
        $8::int,
        $9::int,
        NOW()
)
ON CONFLICT (year, makerid, pieid, userid)
DO UPDATE SET pastry = EXCLUDED.pastry, filling = EXCLUDED.filling, topping = EXCLUDED.topping, looks = EXCLUDED.looks, value = EXCLUDED.value, last_updated = NOW()
`

type UpsertUserMakerPieRankingParams struct {
	Year    int32
	Makerid string
	Pieid   string
	Userid  string
	Pastry  int32
	Filling int32
	Topping int32
	Looks   int32
	Value   int32
}

func (q *Queries) UpsertUserMakerPieRanking(ctx context.Context, arg UpsertUserMakerPieRankingParams) error {
	_, err := q.db.Exec(ctx, upsertUserMakerPieRanking,
		arg.Year,
		arg.Makerid,
		arg.Pieid,
		arg.Userid,
		arg.Pastry,
		arg.Filling,
		arg.Topping,
		arg.Looks,
		arg.Value,
	)
	return err
}
